var documenterSearchIndex = {"docs":
[{"location":"api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api_reference/#Element.ButtonState","page":"API Reference","title":"Element.ButtonState","text":"Enum representing the state of a mouse button.\n\nIsReleased: The button is currently released.\nIsPressed: The button is currently pressed.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Element.MouseButton","page":"API Reference","title":"Element.MouseButton","text":"Enum representing the different mouse buttons.\n\nLeftButton: The left mouse button.\nRightButton: The right mouse button.\nMiddleButton: The middle mouse button (scroll button).\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Element.Container","page":"API Reference","title":"Element.Container","text":"The Container is the most basic GUI component that can contain another component. It is the most basic building block of the GUI system.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Element.apply_layout-Tuple{AbstractView}","page":"API Reference","title":"Element.apply_layout","text":"apply_layout(component::AbstractView)\n\nApply layout to a GUI component and its children. This function calculates and applies the layout to components. The interpret_view function then uses the positions and sizes calculated by this function.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Element.draw_closed_lines-Tuple{Vector{GeometryBasics.Point{2, Float32}}, GeometryBasics.Vec4{<:AbstractFloat}}","page":"API Reference","title":"Element.draw_closed_lines","text":"draw_closed_lines(vertices::Vector{Point2f}, color_rgba::Vec4{<:AbstractFloat})\n\nDraw closed lines using the provided vertices and color.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Element.draw_rectangle-Tuple{Vector{GeometryBasics.Point{2, Float32}}, GeometryBasics.Vec4{<:AbstractFloat}, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Element.draw_rectangle","text":"draw_rectangle(vertices::Vector{Point2f}, color_rgba::Vec4{<:AbstractFloat}, projection_matrix::Mat4{Float32})\n\nDraw a rectangle using the provided vertices and color.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Element.generate_rectangle_vertices-NTuple{4, Any}","page":"API Reference","title":"Element.generate_rectangle_vertices","text":"generate_rectangle_vertices(x, y, width, height)\n\nFunction to generate a rectangle with specified position and size in pixel coordinates.\n\nThis function creates a rectangle defined by its top-left corner (x, y), width, and height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Element.get_orthographic_matrix-Union{Tuple{T}, NTuple{6, T}} where T<:Real","page":"API Reference","title":"Element.get_orthographic_matrix","text":"get_orthographic_matrix(left::T, right::T, bottom::T, top::T, near::T, far::T)::Matrix{T} where {T<:Real}\n\nCreate an orthographic projection matrix.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Element.initialize_shaders-Tuple{}","page":"API Reference","title":"Element.initialize_shaders","text":"Initialize the shader program (must be called after OpenGL context is created)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Element.interpret_view-Tuple{AbstractView, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Element.interpret_view","text":"interpret_view(component::AbstractView, x::Float32, y::Float32, width::Float32, height::Float32, projection_matrix::Mat4{Float32})\n\nInterpret the view of a GUI component. This function is responsible for interpreting the view of a GUI component based on its layout and properties.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Element.run-Tuple{Function}","page":"API Reference","title":"Element.run","text":"run(ui_ref[]::AbstractView; title::String=\"Element\", window_width_px::Integer=1920, window_height_px::Integer=1080)\n\nRun the main loop for the GUI application. This function handles the rendering and event processing for the GUI.\n\n\n\n\n\n","category":"method"},{"location":"Components/container/#Container","page":"Container","title":"Container","text":"","category":"section"},{"location":"Components/container/","page":"Container","title":"Container","text":"The most basic UI component.","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"using Element\n\nfunction MyApp()\n    Container()\nend\n\nscreenshot(MyApp, \"container.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"(Image: Container)","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"You can add a child component to a cointainer, as such:","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"using Element\n\nfunction MyApp()\n    Container(\n        Container()\n    )\nend\n\nscreenshot(MyApp, \"container_child.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"(Image: Container)","category":"page"},{"location":"interaction/#User-interaction","page":"User interaction","title":"User interaction","text":"","category":"section"},{"location":"interaction/","page":"User interaction","title":"User interaction","text":"using Element\n\nfunction MyApp()\n    Container( on_click=() -> println(\"Clicked\") )\nend","category":"page"},{"location":"Components/image/#Image","page":"Image","title":"Image","text":"","category":"section"},{"location":"Components/image/","page":"Image","title":"Image","text":"using Element\n\nfunction MyApp()\n    Container(Image(\"\"))\nend\n\nscreenshot(MyApp, \"missing_image.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"(Image: Image component)","category":"page"},{"location":"Components/layout/#Layout","page":"Layout","title":"Layout","text":"","category":"section"},{"location":"Components/layout/#Column","page":"Layout","title":"Column","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"Column is a component for creating linear layout.","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Element\n\nfunction MyApp()\n    Column([\n        Container(),\n        Container(),\n        Container(),\n    ])\nend\n\nscreenshot(MyApp, \"column.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Column example)","category":"page"},{"location":"Components/layout/#Row","page":"Layout","title":"Row","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"Row is a component for creating linear layout.","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Element\n\nfunction MyApp()\n    Row([\n        Container(),\n        Container(),\n        Container(),\n    ])\nend\n\nscreenshot(MyApp, \"row.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Row example)","category":"page"},{"location":"#Element.jl","page":"Element.jl","title":"Element.jl","text":"","category":"section"},{"location":"","page":"Element.jl","title":"Element.jl","text":"Element.jl is a funcitonal GUI framework written in Julia using OpenGL.","category":"page"},{"location":"","page":"Element.jl","title":"Element.jl","text":"It is intended to be a simple library with few depencdencies, suitable for making scientific applications.","category":"page"},{"location":"","page":"Element.jl","title":"Element.jl","text":"It is very mutch a work-in-progress.","category":"page"},{"location":"Components/slider/#Sliders","page":"Sliders","title":"Sliders","text":"","category":"section"},{"location":"Components/slider/","page":"Sliders","title":"Sliders","text":"using Element\n\n# Ref for maintining the slider state\nslider_value = Ref(0.5f0)\n\nfunction MyApp()\n    Container(\n        HorizontalSlider(\n            slider_value[],\n            0.0f0,              # min value\n            1.0f0;              # max value\n            on_change=(new_value) -> (slider_value[] = new_value)\n        )\n    )\nend\n\nscreenshot(MyApp, \"horizontal_slider.png\", 400, 100);\nnothing #hide","category":"page"},{"location":"Components/slider/","page":"Sliders","title":"Sliders","text":"(Image: Horizontal slider example)","category":"page"},{"location":"Components/text/#Text","page":"Text","title":"Text","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Element\nusing Element: Text\n\nfunction MyApp()\n    Container(\n        Text(\"Some Text\")\n    )\nend\n\nscreenshot(MyApp, \"text.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/#Wrapping","page":"Text","title":"Wrapping","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"The Text component support wrapping by default.","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text)","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Element\nusing Element: Text\n\nfunction MyApp()\n    Container(\n        Text(\"Some strings may be too long to fit, and must be drawn over multiple lines.\")\n    )\nend\n\nscreenshot(MyApp, \"text_wrap.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text wrapping)","category":"page"},{"location":"Components/text/#Horizontal-Alignement","page":"Text","title":"Horizontal Alignement","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Element\nusing Element: Text\n\nfunction MyApp()\n    Container(\n        Column([\n            Text(\"Align left\",   horizontal_align=:left), \n            Text(\"Align center\", horizontal_align=:center), \n            Text(\"Align right\",  horizontal_align=:right)\n        ])\n    )\nend\n\nscreenshot(MyApp, \"text_align.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text horizontal alignement)","category":"page"},{"location":"Components/text/#Vertical-Alignement","page":"Text","title":"Vertical Alignement","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Element\nusing Element: Text\n\nfunction MyApp()\n    Container(\n        Column([\n            Text(\"Align top\",    vertical_align=:top), \n            Text(\"Align middle\", vertical_align=:middle), \n            Text(\"Align bottom\", vertical_align=:bottom)\n        ])\n    )\nend\n\nscreenshot(MyApp, \"text_vertical_align.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text vertical alignment)","category":"page"}]
}
